//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInput/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""f3d2125a-549e-47a2-a21c-f7bb705a47e9"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Value"",
                    ""id"": ""9596d8a3-5e6d-4af1-ab28-3794fd0272c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""d14c70e5-f36d-45e6-a0f9-0c5cf856c344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""5a4f9b80-a4e0-4c93-9857-bf40c36fb4d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""71495552-64ea-4dea-a9db-a26d3c8c6c8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ec2b2961-e369-4628-bbdf-35dbcd9d8ff4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""657b2491-637c-43b2-bee1-930dfc0af5b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""57096737-703e-43a9-b193-7ed03b177c05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""b584d37b-1d19-4ef3-8471-77c4dcd104bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3820a862-8547-4619-959b-5e9520f10632"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19f01170-2320-42c2-869c-fee5ff474696"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ade10f9f-fa85-46da-935a-0df3f40f33c6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65ddc59e-8f5f-415b-80a7-d61e043b2caf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec5f7da8-2f56-4339-9aa6-73bb02b3f166"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""024b848a-dd5b-4fb8-9639-9bbacffb459f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""099a5f90-006a-4330-8daf-67695e8860cd"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54ca5127-c6bd-4486-9df6-4f31dfa38824"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_Up = m_PlayerAction.FindAction("Up", throwIfNotFound: true);
        m_PlayerAction_Left = m_PlayerAction.FindAction("Left", throwIfNotFound: true);
        m_PlayerAction_Right = m_PlayerAction.FindAction("Right", throwIfNotFound: true);
        m_PlayerAction_Down = m_PlayerAction.FindAction("Down", throwIfNotFound: true);
        m_PlayerAction_Attack = m_PlayerAction.FindAction("Attack", throwIfNotFound: true);
        m_PlayerAction_Use = m_PlayerAction.FindAction("Use", throwIfNotFound: true);
        m_PlayerAction_SwapWeapon = m_PlayerAction.FindAction("SwapWeapon", throwIfNotFound: true);
        m_PlayerAction_Skill = m_PlayerAction.FindAction("Skill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private IPlayerActionActions m_PlayerActionActionsCallbackInterface;
    private readonly InputAction m_PlayerAction_Up;
    private readonly InputAction m_PlayerAction_Left;
    private readonly InputAction m_PlayerAction_Right;
    private readonly InputAction m_PlayerAction_Down;
    private readonly InputAction m_PlayerAction_Attack;
    private readonly InputAction m_PlayerAction_Use;
    private readonly InputAction m_PlayerAction_SwapWeapon;
    private readonly InputAction m_PlayerAction_Skill;
    public struct PlayerActionActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_PlayerAction_Up;
        public InputAction @Left => m_Wrapper.m_PlayerAction_Left;
        public InputAction @Right => m_Wrapper.m_PlayerAction_Right;
        public InputAction @Down => m_Wrapper.m_PlayerAction_Down;
        public InputAction @Attack => m_Wrapper.m_PlayerAction_Attack;
        public InputAction @Use => m_Wrapper.m_PlayerAction_Use;
        public InputAction @SwapWeapon => m_Wrapper.m_PlayerAction_SwapWeapon;
        public InputAction @Skill => m_Wrapper.m_PlayerAction_Skill;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnUp;
                @Left.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnRight;
                @Down.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnDown;
                @Attack.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Use.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnUse;
                @SwapWeapon.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSwapWeapon;
                @SwapWeapon.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSwapWeapon;
                @SwapWeapon.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSwapWeapon;
                @Skill.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSkill;
                @Skill.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSkill;
                @Skill.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSkill;
            }
            m_Wrapper.m_PlayerActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @SwapWeapon.started += instance.OnSwapWeapon;
                @SwapWeapon.performed += instance.OnSwapWeapon;
                @SwapWeapon.canceled += instance.OnSwapWeapon;
                @Skill.started += instance.OnSkill;
                @Skill.performed += instance.OnSkill;
                @Skill.canceled += instance.OnSkill;
            }
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActionActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnSwapWeapon(InputAction.CallbackContext context);
        void OnSkill(InputAction.CallbackContext context);
    }
}
