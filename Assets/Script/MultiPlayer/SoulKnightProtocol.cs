// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SoulKnightProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SoulKnightProtocol {

  /// <summary>Holder for reflection information generated from SoulKnightProtocol.proto</summary>
  public static partial class SoulKnightProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for SoulKnightProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SoulKnightProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhTb3VsS25pZ2h0UHJvdG9jb2wucHJvdG8SElNvdWxLbmlnaHRQcm90b2Nv",
            "bCIvCglMb2dpblBhY2sSEAoIVXNlck5hbWUYASABKAkSEAoIUGFzc3dvcmQY",
            "AiABKAkipQEKCFJvb21QYWNrEhAKCHJvb21OYW1lGAEgASgJEhIKCmN1cnJl",
            "bnROdW0YAiABKAUSDgoGbWF4TnVtGAMgASgFEi4KCHJvb21Db2RlGAQgASgO",
            "MhwuU291bEtuaWdodFByb3RvY29sLlJvb21Db2RlEjMKC3BsYXllclBhY2tz",
            "GAUgAygLMh4uU291bEtuaWdodFByb3RvY29sLlBsYXllclBhY2siIAoKUGxh",
            "eWVyUGFjaxISCgpQbGF5ZXJOYW1lGAEgASgJImwKDUNoYXJhY3RlclBhY2sS",
            "FQoNQ2hhcmFjdGVyTmFtZRgBIAEoCRISCgpQbGF5ZXJUeXBlGAIgASgJEjAK",
            "CWlucHV0UGFjaxgDIAEoCzIdLlNvdWxLbmlnaHRQcm90b2NvbC5JbnB1dFBh",
            "Y2singEKCUlucHV0UGFjaxISCgpIb3Jpem9udGFsGAEgASgCEhAKCFZlcnRp",
            "Y2FsGAIgASgCEhEKCU1vdXNlUG9zWBgDIAEoAhIRCglNb3VzZVBvc1kYBCAB",
            "KAISFQoNQ2hhcmFjdGVyUG9zWBgFIAEoAhIVCg1DaGFyYWN0ZXJQb3NZGAYg",
            "ASgCEhcKD2lzQXR0YWNrS2V5RG93bhgHIAEoCCKSAwoITWFpblBhY2sSNAoL",
            "cmVxdWVzdENvZGUYASABKA4yHy5Tb3VsS25pZ2h0UHJvdG9jb2wuUmVxdWVz",
            "dENvZGUSMgoKYWN0aW9uQ29kZRgCIAEoDjIeLlNvdWxLbmlnaHRQcm90b2Nv",
            "bC5BY3Rpb25Db2RlEjIKCnJldHVybkNvZGUYAyABKA4yHi5Tb3VsS25pZ2h0",
            "UHJvdG9jb2wuUmV0dXJuQ29kZRIuCghob3N0Q29kZRgEIAEoDjIcLlNvdWxL",
            "bmlnaHRQcm90b2NvbC5Ib3N0Q29kZRIwCglsb2dpblBhY2sYBSABKAsyHS5T",
            "b3VsS25pZ2h0UHJvdG9jb2wuTG9naW5QYWNrEi8KCXJvb21QYWNrcxgGIAMo",
            "CzIcLlNvdWxLbmlnaHRQcm90b2NvbC5Sb29tUGFjaxI5Cg5jaGFyYWN0ZXJQ",
            "YWNrcxgHIAMoCzIhLlNvdWxLbmlnaHRQcm90b2NvbC5DaGFyYWN0ZXJQYWNr",
            "EhoKEmlzQnJvYWRjYXN0TWVzc2FnZRgIIAEoCCo8CgtSZXF1ZXN0Q29kZRIP",
            "CgtSZXF1ZXN0Tm9uZRAAEggKBFVzZXIQARIICgRSb29tEAISCAoER2FtZRAD",
            "KrABCgpBY3Rpb25Db2RlEg4KCkFjdGlvbk5vbmUQABIMCghSZWdpc3RlchAB",
            "EgkKBUxvZ2luEAISDgoKQ3JlYXRlUm9vbRADEgwKCEpvaW5Sb29tEAQSDAoI",
            "RmluZFJvb20QBRIOCgpGaW5kUGxheWVyEAYSDAoIRXhpdFJvb20QBxIYChRF",
            "bnRlck9ubGluZVN0YXJ0Um9vbRAIEhUKEVVwZGF0ZVBsYXllclN0YXRlEAkq",
            "PwoKUmV0dXJuQ29kZRIOCgpSZXR1cm5Ob25lEAASCwoHU3VjY2VzcxABEggK",
            "BEZhaWwQAhIKCgZOb1Jvb20QAyoyCghSb29tQ29kZRIPCgtXYWl0Rm9ySm9p",
            "bhAAEgsKB1BsYXlpbmcQARIICgRGdWxsEAIqRAoISG9zdENvZGUSEwoPU2Vs",
            "ZWN0Q2hhcmFjdGVyEAASFAoQV2FpdEZvclN0YXJ0R2FtZRABEg0KCUdhbWVT",
            "dGFydBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SoulKnightProtocol.RequestCode), typeof(global::SoulKnightProtocol.ActionCode), typeof(global::SoulKnightProtocol.ReturnCode), typeof(global::SoulKnightProtocol.RoomCode), typeof(global::SoulKnightProtocol.HostCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.LoginPack), global::SoulKnightProtocol.LoginPack.Parser, new[]{ "UserName", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.RoomPack), global::SoulKnightProtocol.RoomPack.Parser, new[]{ "RoomName", "CurrentNum", "MaxNum", "RoomCode", "PlayerPacks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.PlayerPack), global::SoulKnightProtocol.PlayerPack.Parser, new[]{ "PlayerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.CharacterPack), global::SoulKnightProtocol.CharacterPack.Parser, new[]{ "CharacterName", "PlayerType", "InputPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.InputPack), global::SoulKnightProtocol.InputPack.Parser, new[]{ "Horizontal", "Vertical", "MousePosX", "MousePosY", "CharacterPosX", "CharacterPosY", "IsAttackKeyDown" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.MainPack), global::SoulKnightProtocol.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "HostCode", "LoginPack", "RoomPacks", "CharacterPacks", "IsBroadcastMessage" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    [pbr::OriginalName("User")] User = 1,
    [pbr::OriginalName("Room")] Room = 2,
    [pbr::OriginalName("Game")] Game = 3,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    [pbr::OriginalName("Register")] Register = 1,
    [pbr::OriginalName("Login")] Login = 2,
    [pbr::OriginalName("CreateRoom")] CreateRoom = 3,
    [pbr::OriginalName("JoinRoom")] JoinRoom = 4,
    [pbr::OriginalName("FindRoom")] FindRoom = 5,
    [pbr::OriginalName("FindPlayer")] FindPlayer = 6,
    [pbr::OriginalName("ExitRoom")] ExitRoom = 7,
    [pbr::OriginalName("EnterOnlineStartRoom")] EnterOnlineStartRoom = 8,
    [pbr::OriginalName("UpdatePlayerState")] UpdatePlayerState = 9,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Fail")] Fail = 2,
    [pbr::OriginalName("NoRoom")] NoRoom = 3,
  }

  public enum RoomCode {
    [pbr::OriginalName("WaitForJoin")] WaitForJoin = 0,
    [pbr::OriginalName("Playing")] Playing = 1,
    [pbr::OriginalName("Full")] Full = 2,
  }

  public enum HostCode {
    [pbr::OriginalName("SelectCharacter")] SelectCharacter = 0,
    [pbr::OriginalName("WaitForStartGame")] WaitForStartGame = 1,
    [pbr::OriginalName("GameStart")] GameStart = 2,
  }

  #endregion

  #region Messages
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomPack : pb::IMessage<RoomPack> {
    private static readonly pb::MessageParser<RoomPack> _parser = new pb::MessageParser<RoomPack>(() => new RoomPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack(RoomPack other) : this() {
      roomName_ = other.roomName_;
      currentNum_ = other.currentNum_;
      maxNum_ = other.maxNum_;
      roomCode_ = other.roomCode_;
      playerPacks_ = other.playerPacks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack Clone() {
      return new RoomPack(this);
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentNum" field.</summary>
    public const int CurrentNumFieldNumber = 2;
    private int currentNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentNum {
      get { return currentNum_; }
      set {
        currentNum_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 3;
    private int maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "roomCode" field.</summary>
    public const int RoomCodeFieldNumber = 4;
    private global::SoulKnightProtocol.RoomCode roomCode_ = global::SoulKnightProtocol.RoomCode.WaitForJoin;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.RoomCode RoomCode {
      get { return roomCode_; }
      set {
        roomCode_ = value;
      }
    }

    /// <summary>Field number for the "playerPacks" field.</summary>
    public const int PlayerPacksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.PlayerPack> _repeated_playerPacks_codec
        = pb::FieldCodec.ForMessage(42, global::SoulKnightProtocol.PlayerPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.PlayerPack> playerPacks_ = new pbc::RepeatedField<global::SoulKnightProtocol.PlayerPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.PlayerPack> PlayerPacks {
      get { return playerPacks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (CurrentNum != other.CurrentNum) return false;
      if (MaxNum != other.MaxNum) return false;
      if (RoomCode != other.RoomCode) return false;
      if(!playerPacks_.Equals(other.playerPacks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (CurrentNum != 0) hash ^= CurrentNum.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) hash ^= RoomCode.GetHashCode();
      hash ^= playerPacks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (CurrentNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxNum);
      }
      if (RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RoomCode);
      }
      playerPacks_.WriteTo(output, _repeated_playerPacks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (CurrentNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentNum);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomCode);
      }
      size += playerPacks_.CalculateSize(_repeated_playerPacks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPack other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.CurrentNum != 0) {
        CurrentNum = other.CurrentNum;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      if (other.RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) {
        RoomCode = other.RoomCode;
      }
      playerPacks_.Add(other.playerPacks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            CurrentNum = input.ReadInt32();
            break;
          }
          case 24: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 32: {
            RoomCode = (global::SoulKnightProtocol.RoomCode) input.ReadEnum();
            break;
          }
          case 42: {
            playerPacks_.AddEntriesFrom(input, _repeated_playerPacks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPack : pb::IMessage<PlayerPack> {
    private static readonly pb::MessageParser<PlayerPack> _parser = new pb::MessageParser<PlayerPack>(() => new PlayerPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack(PlayerPack other) : this() {
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack Clone() {
      return new PlayerPack(this);
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPack other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterPack : pb::IMessage<CharacterPack> {
    private static readonly pb::MessageParser<CharacterPack> _parser = new pb::MessageParser<CharacterPack>(() => new CharacterPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPack(CharacterPack other) : this() {
      characterName_ = other.characterName_;
      playerType_ = other.playerType_;
      inputPack_ = other.inputPack_ != null ? other.inputPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPack Clone() {
      return new CharacterPack(this);
    }

    /// <summary>Field number for the "CharacterName" field.</summary>
    public const int CharacterNameFieldNumber = 1;
    private string characterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterName {
      get { return characterName_; }
      set {
        characterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerType" field.</summary>
    public const int PlayerTypeFieldNumber = 2;
    private string playerType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerType {
      get { return playerType_; }
      set {
        playerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputPack" field.</summary>
    public const int InputPackFieldNumber = 3;
    private global::SoulKnightProtocol.InputPack inputPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.InputPack InputPack {
      get { return inputPack_; }
      set {
        inputPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterName != other.CharacterName) return false;
      if (PlayerType != other.PlayerType) return false;
      if (!object.Equals(InputPack, other.InputPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterName.Length != 0) hash ^= CharacterName.GetHashCode();
      if (PlayerType.Length != 0) hash ^= PlayerType.GetHashCode();
      if (inputPack_ != null) hash ^= InputPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CharacterName);
      }
      if (PlayerType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerType);
      }
      if (inputPack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InputPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterName);
      }
      if (PlayerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerType);
      }
      if (inputPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterPack other) {
      if (other == null) {
        return;
      }
      if (other.CharacterName.Length != 0) {
        CharacterName = other.CharacterName;
      }
      if (other.PlayerType.Length != 0) {
        PlayerType = other.PlayerType;
      }
      if (other.inputPack_ != null) {
        if (inputPack_ == null) {
          InputPack = new global::SoulKnightProtocol.InputPack();
        }
        InputPack.MergeFrom(other.InputPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CharacterName = input.ReadString();
            break;
          }
          case 18: {
            PlayerType = input.ReadString();
            break;
          }
          case 26: {
            if (inputPack_ == null) {
              InputPack = new global::SoulKnightProtocol.InputPack();
            }
            input.ReadMessage(InputPack);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputPack : pb::IMessage<InputPack> {
    private static readonly pb::MessageParser<InputPack> _parser = new pb::MessageParser<InputPack>(() => new InputPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputPack(InputPack other) : this() {
      horizontal_ = other.horizontal_;
      vertical_ = other.vertical_;
      mousePosX_ = other.mousePosX_;
      mousePosY_ = other.mousePosY_;
      characterPosX_ = other.characterPosX_;
      characterPosY_ = other.characterPosY_;
      isAttackKeyDown_ = other.isAttackKeyDown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputPack Clone() {
      return new InputPack(this);
    }

    /// <summary>Field number for the "Horizontal" field.</summary>
    public const int HorizontalFieldNumber = 1;
    private float horizontal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Horizontal {
      get { return horizontal_; }
      set {
        horizontal_ = value;
      }
    }

    /// <summary>Field number for the "Vertical" field.</summary>
    public const int VerticalFieldNumber = 2;
    private float vertical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vertical {
      get { return vertical_; }
      set {
        vertical_ = value;
      }
    }

    /// <summary>Field number for the "MousePosX" field.</summary>
    public const int MousePosXFieldNumber = 3;
    private float mousePosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MousePosX {
      get { return mousePosX_; }
      set {
        mousePosX_ = value;
      }
    }

    /// <summary>Field number for the "MousePosY" field.</summary>
    public const int MousePosYFieldNumber = 4;
    private float mousePosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MousePosY {
      get { return mousePosY_; }
      set {
        mousePosY_ = value;
      }
    }

    /// <summary>Field number for the "CharacterPosX" field.</summary>
    public const int CharacterPosXFieldNumber = 5;
    private float characterPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CharacterPosX {
      get { return characterPosX_; }
      set {
        characterPosX_ = value;
      }
    }

    /// <summary>Field number for the "CharacterPosY" field.</summary>
    public const int CharacterPosYFieldNumber = 6;
    private float characterPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CharacterPosY {
      get { return characterPosY_; }
      set {
        characterPosY_ = value;
      }
    }

    /// <summary>Field number for the "isAttackKeyDown" field.</summary>
    public const int IsAttackKeyDownFieldNumber = 7;
    private bool isAttackKeyDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackKeyDown {
      get { return isAttackKeyDown_; }
      set {
        isAttackKeyDown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Horizontal, other.Horizontal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vertical, other.Vertical)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MousePosX, other.MousePosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MousePosY, other.MousePosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CharacterPosX, other.CharacterPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CharacterPosY, other.CharacterPosY)) return false;
      if (IsAttackKeyDown != other.IsAttackKeyDown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Horizontal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Horizontal);
      if (Vertical != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vertical);
      if (MousePosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MousePosX);
      if (MousePosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MousePosY);
      if (CharacterPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CharacterPosX);
      if (CharacterPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CharacterPosY);
      if (IsAttackKeyDown != false) hash ^= IsAttackKeyDown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Horizontal != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Horizontal);
      }
      if (Vertical != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Vertical);
      }
      if (MousePosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MousePosX);
      }
      if (MousePosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MousePosY);
      }
      if (CharacterPosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CharacterPosX);
      }
      if (CharacterPosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CharacterPosY);
      }
      if (IsAttackKeyDown != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttackKeyDown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Horizontal != 0F) {
        size += 1 + 4;
      }
      if (Vertical != 0F) {
        size += 1 + 4;
      }
      if (MousePosX != 0F) {
        size += 1 + 4;
      }
      if (MousePosY != 0F) {
        size += 1 + 4;
      }
      if (CharacterPosX != 0F) {
        size += 1 + 4;
      }
      if (CharacterPosY != 0F) {
        size += 1 + 4;
      }
      if (IsAttackKeyDown != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputPack other) {
      if (other == null) {
        return;
      }
      if (other.Horizontal != 0F) {
        Horizontal = other.Horizontal;
      }
      if (other.Vertical != 0F) {
        Vertical = other.Vertical;
      }
      if (other.MousePosX != 0F) {
        MousePosX = other.MousePosX;
      }
      if (other.MousePosY != 0F) {
        MousePosY = other.MousePosY;
      }
      if (other.CharacterPosX != 0F) {
        CharacterPosX = other.CharacterPosX;
      }
      if (other.CharacterPosY != 0F) {
        CharacterPosY = other.CharacterPosY;
      }
      if (other.IsAttackKeyDown != false) {
        IsAttackKeyDown = other.IsAttackKeyDown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Horizontal = input.ReadFloat();
            break;
          }
          case 21: {
            Vertical = input.ReadFloat();
            break;
          }
          case 29: {
            MousePosX = input.ReadFloat();
            break;
          }
          case 37: {
            MousePosY = input.ReadFloat();
            break;
          }
          case 45: {
            CharacterPosX = input.ReadFloat();
            break;
          }
          case 53: {
            CharacterPosY = input.ReadFloat();
            break;
          }
          case 56: {
            IsAttackKeyDown = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      hostCode_ = other.hostCode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      roomPacks_ = other.roomPacks_.Clone();
      characterPacks_ = other.characterPacks_.Clone();
      isBroadcastMessage_ = other.isBroadcastMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SoulKnightProtocol.RequestCode requestCode_ = global::SoulKnightProtocol.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "actionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SoulKnightProtocol.ActionCode actionCode_ = global::SoulKnightProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "returnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SoulKnightProtocol.ReturnCode returnCode_ = global::SoulKnightProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "hostCode" field.</summary>
    public const int HostCodeFieldNumber = 4;
    private global::SoulKnightProtocol.HostCode hostCode_ = global::SoulKnightProtocol.HostCode.SelectCharacter;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.HostCode HostCode {
      get { return hostCode_; }
      set {
        hostCode_ = value;
      }
    }

    /// <summary>Field number for the "loginPack" field.</summary>
    public const int LoginPackFieldNumber = 5;
    private global::SoulKnightProtocol.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "roomPacks" field.</summary>
    public const int RoomPacksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.RoomPack> _repeated_roomPacks_codec
        = pb::FieldCodec.ForMessage(50, global::SoulKnightProtocol.RoomPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.RoomPack> roomPacks_ = new pbc::RepeatedField<global::SoulKnightProtocol.RoomPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.RoomPack> RoomPacks {
      get { return roomPacks_; }
    }

    /// <summary>Field number for the "characterPacks" field.</summary>
    public const int CharacterPacksFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.CharacterPack> _repeated_characterPacks_codec
        = pb::FieldCodec.ForMessage(58, global::SoulKnightProtocol.CharacterPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.CharacterPack> characterPacks_ = new pbc::RepeatedField<global::SoulKnightProtocol.CharacterPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.CharacterPack> CharacterPacks {
      get { return characterPacks_; }
    }

    /// <summary>Field number for the "isBroadcastMessage" field.</summary>
    public const int IsBroadcastMessageFieldNumber = 8;
    private bool isBroadcastMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBroadcastMessage {
      get { return isBroadcastMessage_; }
      set {
        isBroadcastMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (HostCode != other.HostCode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if(!roomPacks_.Equals(other.roomPacks_)) return false;
      if(!characterPacks_.Equals(other.characterPacks_)) return false;
      if (IsBroadcastMessage != other.IsBroadcastMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) hash ^= HostCode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      hash ^= roomPacks_.GetHashCode();
      hash ^= characterPacks_.GetHashCode();
      if (IsBroadcastMessage != false) hash ^= IsBroadcastMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) {
        output.WriteRawTag(32);
        output.WriteEnum((int) HostCode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LoginPack);
      }
      roomPacks_.WriteTo(output, _repeated_roomPacks_codec);
      characterPacks_.WriteTo(output, _repeated_characterPacks_codec);
      if (IsBroadcastMessage != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBroadcastMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HostCode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      size += roomPacks_.CalculateSize(_repeated_roomPacks_codec);
      size += characterPacks_.CalculateSize(_repeated_characterPacks_codec);
      if (IsBroadcastMessage != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) {
        HostCode = other.HostCode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SoulKnightProtocol.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      roomPacks_.Add(other.roomPacks_);
      characterPacks_.Add(other.characterPacks_);
      if (other.IsBroadcastMessage != false) {
        IsBroadcastMessage = other.IsBroadcastMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SoulKnightProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SoulKnightProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SoulKnightProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 32: {
            HostCode = (global::SoulKnightProtocol.HostCode) input.ReadEnum();
            break;
          }
          case 42: {
            if (loginPack_ == null) {
              LoginPack = new global::SoulKnightProtocol.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 50: {
            roomPacks_.AddEntriesFrom(input, _repeated_roomPacks_codec);
            break;
          }
          case 58: {
            characterPacks_.AddEntriesFrom(input, _repeated_characterPacks_codec);
            break;
          }
          case 64: {
            IsBroadcastMessage = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
